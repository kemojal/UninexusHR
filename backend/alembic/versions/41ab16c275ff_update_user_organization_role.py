"""update_user_organization_role

Revision ID: 41ab16c275ff
Revises: 265d203ff6d8
Create Date: 2024-12-18 11:34:18.258575

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '41ab16c275ff'
down_revision: Union[str, None] = '265d203ff6d8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # First create the UserStatus enum type if it doesn't exist
    op.execute("DO $$ BEGIN CREATE TYPE userstatus AS ENUM ('PENDING', 'ACTIVE', 'REJECTED', 'INVITED'); EXCEPTION WHEN duplicate_object THEN NULL; END $$;")

    # Update any null created_at/updated_at values with current timestamp
    op.execute("UPDATE user_organizations SET created_at = NOW() WHERE created_at IS NULL")
    op.execute("UPDATE user_organizations SET updated_at = NOW() WHERE updated_at IS NULL")
    op.execute("UPDATE invitations SET created_at = NOW() WHERE created_at IS NULL")
    op.execute("UPDATE invitations SET updated_at = NOW() WHERE updated_at IS NULL")
    op.execute("UPDATE join_requests SET created_at = NOW() WHERE created_at IS NULL")
    op.execute("UPDATE join_requests SET updated_at = NOW() WHERE updated_at IS NULL")
    op.execute("UPDATE organizations SET created_at = NOW() WHERE created_at IS NULL")
    op.execute("UPDATE organizations SET updated_at = NOW() WHERE updated_at IS NULL")
    op.execute("UPDATE permissions SET created_at = NOW() WHERE created_at IS NULL")
    op.execute("UPDATE permissions SET updated_at = NOW() WHERE updated_at IS NULL")
    op.execute("UPDATE roles SET created_at = NOW() WHERE created_at IS NULL")
    op.execute("UPDATE roles SET updated_at = NOW() WHERE updated_at IS NULL")
    op.execute("UPDATE users SET created_at = NOW() WHERE created_at IS NULL")
    op.execute("UPDATE users SET updated_at = NOW() WHERE updated_at IS NULL")

    # Now proceed with making columns non-nullable
    op.alter_column('invitations', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('invitations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('join_requests', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('join_requests', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('organizations', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('organizations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('permissions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('permissions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    
    # Drop existing indexes if they exist
    op.execute('DROP INDEX IF EXISTS ix_permissions_name')
    # Create composite unique constraint
    op.create_unique_constraint('uix_permission_name_org', 'permissions', ['name', 'organization_id'])
    
    op.alter_column('roles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('roles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_index(op.f('ix_roles_name'), 'roles', ['name'], unique=False)
    
    # Add role_id column to user_organizations
    op.add_column('user_organizations', sa.Column('role_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'user_organizations', 'roles', ['role_id'], ['id'])
    op.drop_column('user_organizations', 'role')
    op.alter_column('user_organizations', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('user_organizations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_index(op.f('ix_user_organizations_id'), 'user_organizations', ['id'], unique=False)
    
    # Update status column to use enum
    op.execute("ALTER TABLE users ALTER COLUMN status TYPE userstatus USING status::userstatus")
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    # Convert status back to varchar
    op.execute("ALTER TABLE users ALTER COLUMN status TYPE varchar USING status::text")
    # Drop the enum type
    op.execute("DROP TYPE userstatus")
    
    op.add_column('user_organizations', sa.Column('role', sa.VARCHAR(), nullable=True))
    op.drop_constraint(None, 'user_organizations', type_='foreignkey')
    op.drop_index(op.f('ix_user_organizations_id'), table_name='user_organizations')
    op.alter_column('user_organizations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('user_organizations', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_column('user_organizations', 'role_id')
    op.drop_index(op.f('ix_roles_name'), table_name='roles')
    op.alter_column('roles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('roles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    
    # Drop the composite unique constraint
    op.drop_constraint('uix_permission_name_org', 'permissions', type_='unique')
    # Create a unique index on name
    op.create_index('ix_permissions_name', 'permissions', ['name'], unique=True)
    
    op.alter_column('permissions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('permissions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('organizations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('organizations', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('join_requests', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('join_requests', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('invitations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('invitations', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    # ### end Alembic commands ###
